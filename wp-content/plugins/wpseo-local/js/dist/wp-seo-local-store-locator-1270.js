(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
/**
 * wpseoLocalGeocodingRepository class for geocoding addresses.
 */
class GeocodingRepository {
	/**
  * Geocode the address based using the Google maps JavaScript geocoding API
  *
  * @var object An object containing either { "address": <address as a string> } or { "location": <the LatLng coordinates>}
  */
	static async geoCodeAddress(location) {
		const geocoder = new google.maps.Geocoder();

		if (typeof location === "object") {
			return new Promise((resolve, reject) => {
				geocoder.geocode(location, (results, status) => {
					if (status === "OK") {
						return resolve(results);
					}

					return reject(status);
				});
			});
		}

		throw new Error("Location should be an object");
	}
}
exports.default = GeocodingRepository;

},{}],2:[function(require,module,exports){
"use strict";

var _wpSeoLocalGeocodingRepository = require("./wp-seo-local-geocoding-repository.js");

var _wpSeoLocalGeocodingRepository2 = _interopRequireDefault(_wpSeoLocalGeocodingRepository);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 */
class StoreLocator {
	/**
  * Constructor for the StoreLocator JS class.
  * Here we assign fields to class constants and bind methods.
  */
	constructor() {
		this.searchForm = document.querySelector("#wpseo-storelocator-form");
		this.searchInput = document.querySelector("#wpseo-sl-search");
		this.locationDetectionButton = document.querySelector(".wpseo_use_current_location");
		this.locationDetectionButtonImg = document.querySelector(".wpseo_use_current_location img");
		this.latField = document.querySelector("#wpseo-sl-lat");
		this.lngField = document.querySelector("#wpseo-sl-lng");
		this.defaultCountry = storeLocator.defaultCountry;

		this.latLng = "";

		this.locationDetection = this.locationDetection.bind(this);
		this.getLatLng = this.getLatLng.bind(this);
		this.handleSubmitForm = this.handleSubmitForm.bind(this);
	}

	/**
  * Add event listeners to fire a function upon specified events.
  */
	addEventListeners() {
		document.addEventListener("click", this.locationDetection);
		document.addEventListener("submit", this.handleSubmitForm);
	}

	/**
  * Auto detect location based on browser information.
  *
  * @param e The event passed by the event listener.
  */
	async locationDetection(e) {
		// Check both the button and the image in it for the click event.
		if (e.target === this.locationDetectionButton || e.target === this.locationDetectionButtonImg) {
			const targetInputId = this.locationDetectionButton.dataset.target;
			const targetInputField = document.querySelector("#" + targetInputId);

			// First try to get the lat and lng from the browser.
			try {
				this.latLng = await this.getLatLng();

				this.latField.value = this.latLng.lat;
				this.lngField.value = this.latLng.lng;
			} catch (error) {
				console.log(error);
			}

			// Continue the geocoding if the requested lat/lng from the browser did not result in an error.
			if (!this.latLng instanceof Error) {
				try {
					const address = await _wpSeoLocalGeocodingRepository2.default.geoCodeAddress({ "location": this.latLng });
					targetInputField.value = address[0].formatted_address;
				} catch (error) {
					console.log(error);
				}
			}
		}
	}

	/**
  * Get the Lat and Lng position from the browser.
  *
  * @returns {Promise<*>}
  */
	async getLatLng() {
		return new Promise((resolve, reject) => {
			navigator.geolocation.getCurrentPosition(position => {
				return resolve({
					lat: parseFloat(position.coords.latitude),
					lng: parseFloat(position.coords.longitude)
				});
			}, function (error) {
				return reject(new Error("Location detection unsuccesfull"));
			});
		});
	}

	/**
  * Catch the submit event and check whether possibly the lat/lng data has to be calculated.
  *
  * @param e The event passed by the event listener.
  *
  * @returns {Promise<void>}
  */
	async handleSubmitForm(e) {
		if (e.target === this.searchForm) {
			e.preventDefault();

			if (this.latField.value === "" || this.lngField.value === "") {
				document.removeEventListener("submit", this.handleSubmitForm);
				const promise = new Promise(async (resolve, reject) => {
					let searchQuery = this.searchInput.value;

					if (this.defaultCountry !== '') {
						searchQuery += ', ' + this.defaultCountry;
					}

					const results = await _wpSeoLocalGeocodingRepository2.default.geoCodeAddress({ address: searchQuery });

					this.latField.value = results[0].geometry.location.lat();
					this.lngField.value = results[0].geometry.location.lng();

					if (this.latField.value !== "" && this.lngField.value !== "") {
						resolve('success');
					}
				});

				const result = await promise;

				if (result === 'success') {
					this.searchForm.submit();
				}
			} else {
				this.searchForm.submit();
			}
		}
	}
}

const storeLocatorInstance = new StoreLocator();

storeLocatorInstance.addEventListeners();

},{"./wp-seo-local-geocoding-repository.js":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
