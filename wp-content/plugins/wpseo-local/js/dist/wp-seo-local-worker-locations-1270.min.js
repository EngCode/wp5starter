(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _yoast$analysis=yoast.analysis;const Paper=_yoast$analysis.Paper,Researcher=_yoast$analysis.Researcher,AssessmentResult=_yoast$analysis.AssessmentResult,Assessment=_yoast$analysis.Assessment;class LocalSchemaAssessment extends Assessment{constructor(s){super(),this.settings=s}getResult(s,e,t){const a=new AssessmentResult,n=new RegExp("class=[\"']wpseo-location[\"']","ig"),o=new RegExp("class=[\"']wp-block-yoast-seo-local-address[\"']","ig"),c=s.getText().match(n)||s.getText().match(o)||0,r=this.score(c);return a.setScore(r.score),a.setText(r.text),a}score(s){return s.length>0?{score:9,text:this.settings.address_schema}:{score:4,text:this.settings.no_address_schema}}}exports.default=LocalSchemaAssessment;

},{}],2:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _yoast$analysis=yoast.analysis;const Paper=_yoast$analysis.Paper,Researcher=_yoast$analysis.Researcher,AssessmentResult=_yoast$analysis.AssessmentResult,Assessment=_yoast$analysis.Assessment;class LocalTitleAssessment extends Assessment{constructor(s){super(),this.settings=s}getResult(s,t,e){const n=new AssessmentResult;if(""!==this.settings.location){const t=new RegExp(this.settings.location,"ig");let e=s.getTitle().match(t)||0,i=this.scoreTitle(e);if(!e){const t=new RegExp("<h(1|2)>.*?"+this.settings.location+".*?</h(1|2)>","ig");e=s.getText().match(t)||0,i=this.scoreHeadings(e)}n.setScore(i.score),n.setText(i.text)}return n}scoreTitle(s){return s.length>0?{score:9,text:this.settings.title_location}:{score:4,text:this.settings.title_no_location}}scoreHeadings(s){return s.length>0?{score:9,text:this.settings.heading_location}:{score:4,text:this.settings.heading_no_location}}}exports.default=LocalTitleAssessment;

},{}],3:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _escapeRegExp=require("lodash/escapeRegExp"),_escapeRegExp2=_interopRequireDefault(_escapeRegExp);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var _yoast$analysis=yoast.analysis;const Paper=_yoast$analysis.Paper,Researcher=_yoast$analysis.Researcher,AssessmentResult=_yoast$analysis.AssessmentResult,Assessment=_yoast$analysis.Assessment;class LocalUrlAssessment extends Assessment{constructor(e){super(),this.settings=e}getResult(e,s,t){const a=new AssessmentResult;if(""!==this.settings.location){let s=this.settings.location;s=s.replace("'","").replace(/\s/gi,"-"),s=(0,_escapeRegExp2.default)(s);const t=new RegExp(s,"ig"),r=e.getUrl().match(t)||0,n=this.score(r);a.setScore(n.score),a.setText(n.text)}return a}score(e){return e.length>0?{score:9,text:this.settings.url_location}:{score:4,text:this.settings.url_no_location}}}exports.default=LocalUrlAssessment;

},{"lodash/escapeRegExp":13}],4:[function(require,module,exports){
"use strict";var _localTitleAssessment=require("./assessments/local-title-assessment"),_localTitleAssessment2=_interopRequireDefault(_localTitleAssessment),_localUrlAssessment=require("./assessments/local-url-assessment"),_localUrlAssessment2=_interopRequireDefault(_localUrlAssessment),_localSchemaAssessment=require("./assessments/local-schema-assessment"),_localSchemaAssessment2=_interopRequireDefault(_localSchemaAssessment);function _interopRequireDefault(s){return s&&s.__esModule?s:{default:s}}class LocalLocationsWorker{register(){analysisWorker.registerMessageHandler("initializeLocations",this.initialize.bind(this),"YoastLocalSEO")}initialize(s){this.titleAssessment=new _localTitleAssessment2.default(s),this.urlAssessment=new _localUrlAssessment2.default(s),this.schemaAssessment=new _localSchemaAssessment2.default(s),analysisWorker.registerAssessment("localTitle",this.titleAssessment,"YoastLocalSEO"),analysisWorker.registerAssessment("localUrl",this.urlAssessment,"YoastLocalSEO"),analysisWorker.registerAssessment("localSchema",this.schemaAssessment,"YoastLocalSEO")}}const localLocationsWorker=new LocalLocationsWorker;localLocationsWorker.register();

},{"./assessments/local-schema-assessment":1,"./assessments/local-title-assessment":2,"./assessments/local-url-assessment":3}],5:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":12}],6:[function(require,module,exports){
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

},{}],7:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":5,"./_getRawTag":10,"./_objectToString":11}],8:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    arrayMap = require('./_arrayMap'),
    isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;

},{"./_Symbol":5,"./_arrayMap":6,"./isArray":14,"./isSymbol":16}],9:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],10:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":5}],11:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],12:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":9}],13:[function(require,module,exports){
var toString = require('./toString');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
    reHasRegExpChar = RegExp(reRegExpChar.source);

/**
 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escapeRegExp('[lodash](https://lodash.com/)');
 * // => '\[lodash\]\(https://lodash\.com/\)'
 */
function escapeRegExp(string) {
  string = toString(string);
  return (string && reHasRegExpChar.test(string))
    ? string.replace(reRegExpChar, '\\$&')
    : string;
}

module.exports = escapeRegExp;

},{"./toString":17}],14:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],15:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],16:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;

},{"./_baseGetTag":7,"./isObjectLike":15}],17:[function(require,module,exports){
var baseToString = require('./_baseToString');

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

},{"./_baseToString":8}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
