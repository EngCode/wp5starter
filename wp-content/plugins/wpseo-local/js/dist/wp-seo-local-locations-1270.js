(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
/**
 * wpseoLocalGeocodingRepository class for geocoding addresses.
 */
class GeocodingRepository {
	/**
  * Geocode the address based using the Google maps JavaScript geocoding API
  *
  * @var object An object containing either { "address": <address as a string> } or { "location": <the LatLng coordinates>}
  */
	static async geoCodeAddress(location) {
		const geocoder = new google.maps.Geocoder();

		if (typeof location === "object") {
			return new Promise((resolve, reject) => {
				geocoder.geocode(location, (results, status) => {
					if (status === "OK") {
						return resolve(results);
					}

					return reject(status);
				});
			});
		}

		throw new Error("Location should be an object");
	}
}
exports.default = GeocodingRepository;

},{}],2:[function(require,module,exports){
"use strict";

var _wpSeoLocalGeocodingRepository = require("./wp-seo-local-geocoding-repository.js");

var _wpSeoLocalGeocodingRepository2 = _interopRequireDefault(_wpSeoLocalGeocodingRepository);

var _wpSeoLocalTimezoneRepository = require("./wp-seo-local-timezone-repository.js");

var _wpSeoLocalTimezoneRepository2 = _interopRequireDefault(_wpSeoLocalTimezoneRepository);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A class to handle all address changes and maybe calculate new lat/long and timezone.
 */
class Locations {
	/**
  * Constructor for the wpseoLocalGeocodingRepository.
  * Here we assign fields to class constants and bind methods.
  */
	constructor() {
		this.addressFields = [document.querySelector(".wpseo_local_address_input"), document.querySelector(".wpseo_local_zipcode_input"), document.querySelector(".wpseo_local_city_input"), document.querySelector(".wpseo_local_state_input"), document.querySelector(".select[id*=\"_country\"]")];

		this.latLngSettingsContainer = document.getElementById("location-coordinates-settings");
		this.latLngSettingsFieldWrapper = document.getElementById("location-coordinates-settings-lat-lng-wrapper");
		this.calculateLatLngButton = document.getElementById("calculate_lat_lng_button");

		this.latField = document.querySelector(".wpseo_local_lat_input");
		this.lngField = document.querySelector(".wpseo_local_lng_input");

		this.timezoneField = document.querySelector("select[id*=\"_timezone\"]");

		this.apiKey = wpseoLocalLocations.apiKey;

		this.maybeGeoCodeAddress = this.maybeGeoCodeAddress.bind(this);
		this.maybeShowAddressChangesNotification = this.maybeShowAddressChangesNotification.bind(this);
		this.setTimezone = this.setTimezone.bind(this);
		this.formatAddress = this.formatAddress.bind(this);
	}

	/**
  * Add event listeners to fire a function upon specified events.
  */
	addEventListeners() {
		document.addEventListener("click", this.maybeGeoCodeAddress);
		document.addEventListener("change", this.maybeShowAddressChangesNotification);
	}

	/**
  * Check wheter a address should be geocoded.
  *
  * @param e The event passed by the event listener.
  */
	async maybeGeoCodeAddress(e) {
		/**
   * If either the lat or lng field does not exist bail to avoid (console)errors.
   */
		if (this.latField === null || this.lngField === null) {
			return;
		}

		this.calculateLatLngNotification = document.querySelector(".yoast-seo-local__alert");

		if (this.calculateLatLngButton === e.target) {
			e.preventDefault();
			this.errorField = document.querySelector(".wpseo_local_geocoding_error");
			const latOldValue = this.latField.value;
			const lngOldValue = this.lngField.value;

			const formattedAddress = this.formatAddress();

			if (this.errorField !== null) {
				this.errorField.parentNode.removeChild(this.errorField);
			}

			/**
    * Empty the lat/lng fields. They will be recalculated and result in empty fields if geocoding failed.
    *
    * @type {string}
    */
			this.latField.value = "";
			this.lngField.value = "";

			const wrapper = document.createElement("div");

			/**
    * Try Geocoding of the given address. If it fails generate an error message based on the returned error.
    */
			try {
				const results = await _wpSeoLocalGeocodingRepository2.default.geoCodeAddress({ address: formattedAddress });

				this.latField.value = results[0].geometry.location.lat();
				this.lngField.value = results[0].geometry.location.lng();

				if (this.calculateLatLngNotification !== null) {
					this.calculateLatLngNotification.parentNode.removeChild(this.calculateLatLngNotification);
				}
				wrapper.innerHTML = wpseoLocalLocations.calculateLatLngSuccessMessage;

				this.latLngSettingsContainer.insertBefore(wrapper, this.latLngSettingsFieldWrapper);

				if (this.latField.value !== "" && this.lngField.value !== "" && this.latField.value !== latOldValue || this.lngField.value !== lngOldValue) {
					this.setTimezone();
				}
			} catch (error) {
				const errorFieldElement = document.createElement("p");
				errorFieldElement.classList.add("wpseo_local_geocoding_error");

				if (this.calculateLatLngNotification !== null) {
					this.calculateLatLngNotification.parentNode.removeChild(this.calculateLatLngNotification);
				}
				wrapper.innerHTML = wpseoLocalLocations.calculateLatLngErrorMessage;
				this.latLngSettingsContainer.insertBefore(wrapper, this.latLngSettingsFieldWrapper);

				switch (error) {
					case "ZERO_RESULTS":
						errorFieldElement.appendChild(document.createTextNode("We could not retrieve coordinates for this address."));
						break;
					case "OVER_QUERY_LIMIT":
						errorFieldElement.appendChild(document.createTextNode("You are over your query limit."));
						break;
					case "REQUEST_DENIED":
						errorFieldElement.appendChild(document.createTextNode("Your API key is not entered or not valid."));
				}

				// Display the error after the longitude field.
				// @note: Temporarily removed. Will add this back later.
				// this.lngField.parentNode.after( errorFieldElement );
			}
		}
	}

	async maybeShowAddressChangesNotification(e) {
		if (this.addressFields.indexOf(e.target) !== -1) {
			this.calculateLatLngNotification = document.querySelector(".yoast-seo-local__alert");

			if (this.calculateLatLngNotification !== null) {
				this.calculateLatLngNotification.parentNode.removeChild(this.calculateLatLngNotification);
			}

			const wrapper = document.createElement("div");
			wrapper.innerHTML = wpseoLocalLocations.addressChangedMessage;

			this.latLngSettingsContainer.insertBefore(wrapper, this.latLngSettingsFieldWrapper);
		}
	}

	/**
  * Format an address the Google Geocoder can use based on the filled in address fields.
  *
  * @returns {string}
  */
	formatAddress() {
		let address = [];

		this.addressFields.forEach(function (addressField) {
			if (addressField.value !== "") {
				address.push(addressField.value);
			}
		});

		return address.join(", ");
	}

	async setTimezone() {
		/**
   * Check if either the lat or lng field has changed and if they are not empty
   */
		const latLng = this.latField.value + ", " + this.lngField.value;

		try {
			const result = await _wpSeoLocalTimezoneRepository2.default.getTimezone(latLng, this.apiKey);

			if (result !== "") {
				jQuery(this.timezoneField).val(result).trigger("change");
			}
		} catch (error) {
			console.log(error);
		}
	}
}

const locationsInstance = new Locations();

locationsInstance.addEventListeners();

},{"./wp-seo-local-geocoding-repository.js":1,"./wp-seo-local-timezone-repository.js":3}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
/**
 * TimezoneRepository class for retrieving the timezone based based on lat/lng coordinates.
 */
class TimezoneRepository {
	/**
  * Get the timezone from Google's Timezone API
  *
  * @var object An object containing either { "address": <address as a string> } or { "location": <the LatLng coordinates>}
  */
	static async getTimezone(latLng, apiKey) {
		const timestamp = Math.floor(Date.now() / 1000);

		const searchParams = new URLSearchParams();

		searchParams.append("location", latLng);
		searchParams.append("timestamp", timestamp);
		searchParams.append("key", apiKey);

		const request = "https://maps.googleapis.com/maps/api/timezone/json?" + searchParams;

		return new Promise((resolve, reject) => {
			const xhr = new XMLHttpRequest();

			xhr.open("GET", request);
			xhr.onload = () => {
				if (xhr.status === 200) {
					const output = JSON.parse(xhr.responseText);

					if (output.status === 'OK') {
						return resolve(output.timeZoneId);
					}

					return reject(output);
				}

				return reject(xhr.status);
			};
			xhr.send();
		});
	}
}
exports.default = TimezoneRepository;

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
